#!/usr/bin/env python

import sys
from argparse import ArgumentParser

argParser = ArgumentParser(description = 'Panda storage profile')
argParser.add_argument('source', metavar = 'FILE', nargs = '+', help = 'Files to analyze.')
argParser.add_argument('--tree', '-t', metavar = 'TREE', dest = 'tree', default = 'events', help = 'Name of the tree to analyze (default: events).')
argParser.add_argument('--out', '-o', metavar = 'PATH', dest = 'outputFile', default = '', help = 'Write to output.')

args = argParser.parse_args()
sys.argv = []

import ROOT

# a recursive branch size calculator
# we probably never have nested branches, but just in case
def getZipBytes(br):
    tot = 0
    for sub in br.GetListOfBranches():
        tot += getZipBytes(sub)

    tot += br.GetZipBytes()
    return tot


canvas = ROOT.TCanvas('c1', 'c1', 800, 800)

for path in args.source:
    source = ROOT.TFile.Open(path)

    tree = source.Get(args.tree)
    
    nEvents = tree.GetEntries()

    bsizes = {}

    for branch in tree.GetListOfBranches():
        name = branch.GetName()
        if '.' in name:
            obj = name.split('.')[0]
        else:
            obj = name

        bytes = getZipBytes(branch)

        try:
            bsizes[obj] += bytes / 1000. / nEvents
        except KeyError:
            bsizes[obj] = bytes / 1000. / nEvents

bsizeList = sorted(bsizes.items(), key = lambda x: x[1], reverse = True)

nB = len(bsizeList)
totalSize = sum(s for n, s in bsizeList)

iB = 0
cumul = 0.
while True:
    if cumul > 0.95:
        rest = bsizeList[iB:]
        bsizeList = bsizeList[:iB]
        bsizeList.append(('others', sum(s for n, s in rest)))
        nB = len(bsizeList)
        break

    cumul += bsizeList[iB][1] / totalSize
    iB += 1

if args.outputFile:
    outputFile = ROOT.TFile.Open(args.outputFile, 'recreate')

chart = ROOT.TPie('chart', 'Total = %.3f kB / evt' % totalSize, nB)
chart.SetAngularOffset(90)
chart.SetRadius(0.3)
chart.SetTextFont(42)
chart.SetTextSize(0.03)

cwheel = ['kGreen', 'kYellow', 'kRed', 'kMagenta', 'kBlue', 'kCyan', 'kSpring', 'kOrange', 'kPink', 'kViolet', 'kAzure', 'kTeal']
iw = 0
io = 0

for iB, (name, size) in enumerate(bsizeList):
    chart.SetEntryLabel(iB, '%s (%.3f)' % (name, size))

    chart.SetEntryVal(iB, size)

    chart.SetEntryFillColor(iB, getattr(ROOT, cwheel[iw]) + io)

    iw += 1
    if iw == len(cwheel):
        iw = 0
        io += 1

if args.outputFile:
    outputFile.cd()
    outputFile.Write()
    outputFile.Close()

chart.SetX(0.4)
chart.SetY(0.35)
chart.Draw('nol')

legend = chart.MakeLegend()
legend.SetY1(0.6)
legend.SetY2(0.9)
legend.Draw()

for iB in xrange(nB):
    chart.SetEntryLabel(iB, '')

chart.SetLabelsOffset(0.01)
chart.SetLabelFormat('%perc')

canvas.Update()
sys.stdin.readline()
